@{
    Layout = null;
}

<!--右侧实体内容-->
<el-main id="partPage">
    <div v-show="showMask">
        <div class="mask"></div>
    </div>
    
    <el-collapse v-model="activeNames">
        <el-collapse-item title="宝发硫化鞋生产线01" name="1">
            <div v-loading="loading"
                 element-loading-text="数据加载中"
                 element-loading-spinner="el-icon-loading"
                 element-loading-background="rgba(0, 0, 0, 0.8)"
                 id="imgFrame" style="margin-bottom:30px;position:relative;width:900px;height:430px;">
                <img src="~/Content/images/deviceMonitor.png" style="width:900px;height:430px;"/>
                <!--设备状态按钮-->
                <template v-for="(btn,index) of deviceBtns">
                    <sam-devicebtn :param="btn" :index="index"></sam-devicebtn>
                </template>
                <i v-if="showMask" class="el-icon-error" v-on:click="restoreScreen" style="position:absolute;right:40px;bottom:20px;font-size:40px;"></i>
                <i v-else class="el-icon-rank" v-on:click="changeFullScreen" style="position:absolute;right:40px;bottom:20px;font-size:40px;"></i>
            </div>
        </el-collapse-item>
        <el-collapse-item title="宝发硫化鞋生产线02" name="2">
            <div class="device-box">
                <div class="device-box-img"></div>
                <p>视觉站1</p>
                <div><span>状态</span>&nbsp;<el-tag type="success">正常</el-tag></div>
                <div><span>状态号</span>&nbsp;<el-tag type="success">0</el-tag></div>
                <div><span>报警号</span>&nbsp;<el-tag type="success">0</el-tag></div>
            </div>
            <div class="device-box">
                <div class="device-box-img"></div>
                <p>视觉站2</p>
                <div><span>状态</span>&nbsp;<el-tag type="danger">异常</el-tag></div>
                <div><span>状态号</span>&nbsp;<el-tag type="danger">1</el-tag></div>
                <div><span>报警号</span>&nbsp;<el-tag type="danger">1</el-tag></div>
            </div>
            <div class="device-box">
                <div class="device-box-img"></div>
                <p>视觉站3</p>
                <div><span>状态</span>&nbsp;<el-tag type="info">离线</el-tag></div>
                <div><span>状态号</span>&nbsp;<el-tag type="info">0</el-tag></div>
                <div><span>报警号</span>&nbsp;<el-tag type="info">0</el-tag></div>
            </div>
        </el-collapse-item>
        <el-collapse-item title="华宝硫化鞋生产线03" name="3">
            <div>暂无数据</div>
        </el-collapse-item>
    </el-collapse>
</el-main>

<script>
    //vue组件-设备按钮显示
    Vue.component('sam-devicebtn', {
        props: ['param', 'index'],
        template: `<el-tooltip :placement="param.tooltip.placement" :disabled="param.tooltip.disabled" effect="light" class="tips">
                        <div slot="content" :style="{fontSize:param.tooltip.font_size}">
                            <template v-for="t in param.tips">
                                {{t}} : {{param.tips[t]}}
                                 <br />
                            </template>
                        </div>
                        <div v-on:mouseover="showMore=true" v-on:mouseout="showMore=false"
                             class="device-button" :class="theme.mainClass"
                            :style="{left:param.position.left,top:param.position.top}">
                            <span>{{param.name}}</span>
                            <el-button :type="theme.warnType" round class="device-status">{{theme.text}}</el-button>
                            <el-collapse-transition>
                                <div v-show="showMore">
                                    <hr :style="{color:theme.color}" />
                                    <template v-for="(d,i) in param.detail">
                                        {{i}} : {{d}}
                                         <br />
                                    </template>
                                </div>
                            </el-collapse-transition>
                        </div>
                    </el-tooltip>`,
        data: function () {
            let theme
            switch (this.param.status) {
                case 0: theme = {
                    mainClass: 'device-button-info',
                    warnType: 'info',
                    text: '离线',
                    color: '#909399'
                }; break;
                case 2: theme = {
                    mainClass: 'device-button-warning',
                    warnType: 'warning',
                    text: '警告',
                    color: '#E6A23C'
                }; break;
                case 3: theme = {
                    mainClass: 'device-button-danger',
                    warnType: 'danger',
                    text: '危险',
                    color: '#F56C6C'
                }; break;
                default: theme = {
                    mainClass: 'device-button-success',
                    warnType: 'success',
                    text: '正常',
                    color: '#67C23A'
                };
            }
            return {
                showMore: false,
                theme: theme
            }
        }
    })
    var img = $("#imgFrame img").find("img")[0]
    var deviceButtoCss = {}
    var deviceStatusCss = {}
    var imgWidth = 900
    var imgHeight = 430

    var index = new Vue({
        el: "#partPage",
        mixins: [mixin],
        data: function () {
            return {
                activeNames: ['1'],
                deviceBtns: _cloneArr(DEVICES),
                showMask: false,
                loading: true
            }
        },
        methods: {
            //监控界面全屏
            changeFullScreen: function () {
                var screenHeight = window.screen.height;
                var screenWidth = window.screen.width;
                var scale = screenWidth / screenHeight > 900 / 430 ? screenHeight / 430 : screenWidth / 900;
                this.showMask = true;
                deviceButtoCss = {
                    "width": parseInt($(".device-button").css("width")),
                    "font-size": parseInt($(".device-button").css("font-size")),
                    "border-radius": parseInt($(".device-button").css("border-radius")),
                    "padding-left": parseInt($(".device-button").css("padding-left"))
                }
                deviceStatusCss = {
                    "padding": parseInt($(".device-status").css("padding")),
                    "font-size": parseInt($(".device-status").css("font-size")),
                    "line-height": parseInt($(".device-status").css("line-height"))
                }
                console.log('padding = ' + $(".device-button").css("padding"));
                $("#imgFrame").css({ "width": imgWidth * scale + 'px', "height": imgHeight * scale + 'px', "position": "absolute", "top": "0", "left": "0" })
                $("#imgFrame").find("img").css({ "width": imgWidth * scale + 'px', "height": imgHeight * scale + 'px' })
                $("body").css({ "overflow": "hidden" })
                for (let param of DEVICES) {
                    param.tooltip.font_size = "21px"
                }
                for (let css in deviceButtoCss) {
                    $(".device-button").css(css, deviceButtoCss[css] * scale + 'px')
                }
                for (let css in deviceStatusCss) {
                    css == "padding" ? $(".device-status").css("cssText", css + ":" + Math.ceil(deviceStatusCss[css] * scale) + 'px !important;') : $(".device-status").css(css, deviceStatusCss[css] * scale + 'px')
                }

            },
            //监控界面恢复
            restoreScreen: function () {
                $("#imgFrame").css({ "width": imgWidth + 'px', "height": imgHeight + 'px', "position": "relative", "top": "0", "left": "0" })
                $("#imgFrame").find("img").css({ "width": imgWidth + 'px', "height": imgHeight + 'px' })
                $("body").css({ "overflow": "scroll" })
                for (let param of DEVICES) {
                    param.tooltip.font_size = "12px"
                }
                for (let css in deviceButtoCss) {
                    $(".device-button").css(css, deviceButtoCss[css] + 'px')
                }
                for (let css in deviceStatusCss) {
                    css == "padding" ? $(".device-status").css("cssText", css + ":" + deviceStatusCss[css] + 'px !important;') : $(".device-status").css(css, deviceStatusCss[css] + 'px')
                    console.log(css + ' = ' + $(".device-status").css(css))
                }
                this.showMask = false;
            }
        },
        created: function () {
            var that = this;
            
            ws.onopen = function () {
               // $("#messageSpan").text("Connected!");
                if (ws.readyState == WebSocket.OPEN) {

                    window.setInterval(function () {
                        ws.send("GetAllTable");
                    },2000)
                    
                } else {

                }
            };
           
            ws.onmessage = function (result) {
                // $("#messageSpan").text(result.data);
                //alert(result.data)
                that.loading = false
                let devData = JSON.parse(JSON.parse(result.data))
                that.deviceBtns = _cloneArr(DEVICES)
                console.log(that.deviceBtns)
                console.log(devData)
                for (let dev of that.deviceBtns) {
                    if (dev.detail) {
                        for (let d in devData) {
                            let dObj = devData[d][0]
                            //console.error(d)
                            //console.error(dObj)
                            //console.log(dev.SprayID)
                            if (dObj.SprayID == dev.SprayID && dObj.SprayID != null) {
                                for (let det in dev.detail) {
                                    //console.log('1111111111111')
                                    //console.log(det)
                                    //console.log(dev.detail[det])
                                    //console.log(dObj)
                                    //console.log(dObj[dev.detail[det]])
                                    //console.log('2222222222222')
                                    if (dObj[dev.detail[det]] !=null) {
                                        //console.log('1111111111111')
                                        //console.log(dObj[dev.detail[det]])
                                        //console.log('2222222222222')
                                        dev.detail[det] = dObj[dev.detail[det]]
                                    }
                                    else {
                                        delete dev.detail[det]
                                    }
                                }
                            }
                        }
                    }
                }
            };
            ws.onerror = function (error) {
              //  $("#messageSpan").text(error.data);
            };
            ws.onclose = function () {
              //  $("#messageSpan").text("Disconnected!");
            };
            loadHtml("mainPage", "partPage")
        }

    })

</script>



