@{
    Layout = null;
}

<!--右侧实体内容-->
<el-main id="partPage">
    <div v-show="showMask">
        <div class="mask"></div>
    </div>
    <el-collapse v-model="activeNames">
        <el-collapse-item :title="useages[0].ProductLineName" name="1">
            <div @*v-loading="loading"
                 element-loading-text="数据加载中"
                 element-loading-spinner="el-icon-loading"*@
                 element-loading-background="rgba(0, 0, 0, 0.8)"
                 id="imgFrame" style="margin-bottom:30px;position:relative;">
                <img src="~/Content/images/deviceMonitor.png" style="max-width:100%" />
                <!--生产数量统计-->
                <el-button plain type="danger" class="device-count" style="top:1%;left:0.56%;">当班产量</el-button>
                <el-button type="danger" class="device-count" style="top:1%;left:8.56%;font-weight:bold;">{{useages[0].Data.NowN}}</el-button>
                <el-button plain type="danger" class="device-count" style="top:8%;left:0.56%;">总产量</el-button>
                <el-button type="danger" class="device-count" style="top:8%;left:8.56%;font-weight:bold;">{{useages[0].Data.AllN}}</el-button>
                <el-button plain type="danger" class="device-count" style="top:15%;left:0.56%;">生产节拍</el-button>
                <el-button type="danger" class="device-count" style="top:15%;left:8.56%;font-weight:bold;">{{useages[0].Data.ProductionBeat}}</el-button>
                <el-button plain type="danger" class="device-count" style="top:78%;left:45%;">总订单号</el-button>
                <el-button type="danger" class="device-count" style="top:78%;left:53%;font-weight:bold;">{{useages[0].Data.OrderID}}</el-button>
                <el-button plain type="danger" class="device-count" style="top:85%;left:45%;">子订单号</el-button>
                <el-button type="danger" class="device-count" style="top:85%;left:53%;font-weight:bold;">{{useages[0].Data.ChildID}}</el-button>
                <el-button plain type="danger" class="device-count" style="top:92%;left:45%;">运行状态</el-button>
                <el-button type="danger" class="device-count" style="top:92%;left:53%;font-weight:bold;">{{useages[0].Data.Linestatus}}</el-button>
                <!--设备状态按钮-->
                <template v-for="(btn,index) of deviceBtns">
                    <sam-devicebtn :param="btn" :index="index"></sam-devicebtn>
                </template>
                <i v-if="showMask" class="el-icon-error" v-on:click="restoreScreen(0)" style="position:absolute;right:40px;bottom:20px;font-size:40px;"></i>
                <i v-else class="el-icon-rank" v-on:click="changeFullScreen(0)" style="position:absolute;right:40px;bottom:20px;font-size:40px;"></i>
            </div>
        </el-collapse-item>
        <el-collapse-item :title="useages[1].ProductLineName" name="2">
            <img src="~/Content/images/deviceMonitor2.png" style="max-width:100%" />
        </el-collapse-item>
    </el-collapse>

</el-main>

<script>
    //vue组件-设备按钮显示
    Vue.component('sam-devicebtn', {
        props: ['param', 'index'],
        template: '<el-tooltip :placement="param.tooltip.placement" :disabled="param.tooltip.disabled" effect="light" class="tips">'+
                        '<div slot="content" :style="{fontSize:param.tooltip.font_size}">' +
                            '<template v-for="t in param.tips">' +
                                '{{t}} : {{param.tips[t]}}' +
                                '<br />' +
                            '</template>' +
                        '</div>' +
                         '<div v-on:mouseover="showMore=true" v-on:mouseout="showMore=false" v-on:click="showDetail(param.num)"' +
                        'class="device-button" :class="theme.mainClass"' +
                        ':style="{left:param.position.left,top:param.position.top}">' +
                        '<span>{{param.name}}</span>' +
                        '<el-button :type="theme.warnType" round class="device-status">{{theme.text}}</el-button>' +
                            '<el-collapse-transition>' +
                                '<div v-show="showMore">' +
                                '<hr :style="{color:theme.color}" />' +
                                    '<template v-for="(d,i) in param.detail">' +
                                    '{{i}} : {{d}}' +
                                    '<br />' +
                                    '</template>' +
                                '</div>' +
                            '</el-collapse-transition>' +
                        '</div>' +
                    '</el-tooltip>',
        data: function () {
            return {
                showMore: false
            }
        },
        methods: {
            //显示胶站详细信息页面
            showDetail: function (id) {
                //console.log(id)
                loadPage('/Main/DeviceDetail')
            }
        },
        computed: {
            theme: function () {
                var theme
                switch (this.param.status) {
                    case '空闲': theme = {
                        mainClass: 'device-button-info',
                        warnType: 'warning',
                        text: '空闲',
                        color: '#E6A23C'
                    }; break;
                    case '运行': theme = {
                        mainClass: 'device-button-success',
                        warnType: 'success',
                        text: '运行',
                        color: '#67C23A'
                    }; break;
                    case '报警': theme = {
                        mainClass: 'device-button-danger',
                        warnType: 'danger',
                        text: '报警',
                        color: '#F56C6C'
                    }; break;
                    case '未启用': theme = {
                        mainClass: 'info-button-info',
                        warnType: 'info',
                        text: '未启用',
                        color: '#909399'
                    }; break;
                    default: theme = {
                        mainClass: 'device-button-info',
                        warnType: 'info',
                        text: '停止',
                        color: '#909399'
                    };
                }
                return theme
            }
        }
    })
    var img = $("#imgFrame img").find("img")[0]
    var deviceButtoCss = {}
    var deviceStatusCss = {}
    var imgWidth = 900
    var imgHeight = 430
    new Vue({
        el: "#partPage",
        mixins: [mixin],
        data: function () {
            return {
                activeNames: ['1'],
                deviceBtns: _cloneArr(DEVICES[0]),
                deviceBtns2: _cloneArr(DEVICES[1]),
                showMask: false,
                loading: true,
                useages: [
                    {
                        ProductLineName: '',
                        Data: {},
                        ProductLineId: ''
                    }, {
                        ProductLineName: '',
                        Data: {},
                        ProductLineId: ''
                    }]
            }
        },
        methods: {
            //监控界面全屏
            changeFullScreen: function (no) {
                var frameWidth = screenWidth
                //screenWidth / screenHeight > 900 / 430 ? $("#imgFrame").css({ "height": screenHeight }) : $("#imgFrame").css({ "width": screenWidth })
                if (screenWidth < 1400) frameWidth = screenWidth -90
                $("#imgFrame").css({ "width": frameWidth })
                $("#imgFrame").css({ "position": "fixed", "top": "0", "left": "0" })
                imgWidth = parseInt($("#imgFrame").css("width"))
                imgHeight = parseInt($("#imgFrame").css("height"))
                console.log(frameWidth)
                console.log("imgWidth,imgHeight = " + imgWidth + " , " + imgHeight)
                this.showMask = true;
                $("body").css({ "overflow": "hidden" })
                for (var p = 0; p < DEVICES[no].length;p++) {
                    DEVICES[no][p].tooltip.font_size = "1.2em"
                }
                $(".device-button").css("font-size", "1.4em")
                $(".device-count").css("font-size", "1.4em")
            },
            //监控界面恢复
            restoreScreen: function (no) {
                $("#imgFrame").css({ "width": '100%', "height": 'auto', "position": "relative", "top": "0", "left": "0" })
                $("#imgFrame").find("img").css({ "width": '100%'})
                $("body").css({ "overflow": "scroll" })
                for (var p = 0; p < DEVICES[no].length; p++) {
                    DEVICES[no][p].tooltip.font_size = "1em"
                }
                $(".device-button").css("font-size", "1em")
                $(".device-count").css("font-size", "1em")
                for (var css in deviceStatusCss) {
                    css == "padding" ? $(".device-status").css("cssText", css + ":" + deviceStatusCss[css] + 'px !important;') : $(".device-status").css(css, deviceStatusCss[css] + 'px')
                }
                this.showMask = false;
            },
            //获取实时数量信息
            getUseage: function () {
                var that = this
                $.ajax({
                    url: "usage/getusage",
                    success: function (data) {
                        //console.log('获取实时数量信息')
                        //console.log(JSON.parse(data))
                        that.useages = JSON.parse(data)
                        setLocalObj('lineData', that.useages)
                    }
                })
            },
            //处理实时状态数据
            handleStatusData: function (devData) {
                var that = this;
                //一号线数据
                var devDataArr1 = []
                for (let d in devData[0].Data) {
                    if (devData[0].Data[d][0])
                    devDataArr1.push(devData[0].Data[d][0])
                }
                devDataArr1.push(devData[0].V_STATE)

                that.deviceBtns = _cloneArr(DEVICES[0])
                that.deviceBtns2 = _cloneArr(DEVICES[1])
                console.log(devDataArr1)
                for (let i = 0; i < that.deviceBtns.length; i++) {
                    var dev = that.deviceBtns[i]
                    var ifDevData = false
                    if (!dev.detail) continue
                    //胶站设置数据
                    for (let dObj of devDataArr1) {
                        if (!dObj) continue
                        if (dObj.SprayID != dev.SprayID || dObj.SprayID == null) continue
                        //设备名称
                        //if (dObj.stationName) dev.name = dObj.stationName
                        //设备状态
                        if (dObj.stationstate) dev.status = dObj.stationstate
                        if (dObj.VisualOneState) dev.status = dObj.VisualOneState
                        if (dObj.VisualTwoState) dev.status = dObj.VisualTwoState
                        if (dObj.StationState) dev.status = dObj.StationState
                        if (dObj.V1) dev.status = dObj.V1
                        if (dObj.SOLEP) dev.status = dObj.SOLEP
                        if (dObj.V2) dev.status = dObj.V2
                        if (dObj.TENP) dev.status = dObj.TENP
                        for (let det in dev.detail) {
                            var ele = dev.detail[det]
                            if (dObj[ele] != null) {
                                dev.detail[det] = dObj[ele]
                                //
                                if (DETAILRANGE[ele]) {
                                    if ((dObj[ele] < DETAILRANGE[ele].min || dObj[ele] > DETAILRANGE[ele].max)) {
                                        console.log('报警报警报警报警报警报警')
                                        console.log(ele)
                                        console.log(dObj)
                                        console.log(DETAILRANGE[ele].min)
                                        console.log(DETAILRANGE[ele].max)
                                        dev.status = '报警'
                                        dev.tooltip.disabled = false
                                        dev.tips[det] = det + ":" + dObj[ele]
                                    }
                                    else {
                                        dev.status = '运行' 
                                    }
                                    if (getLocalObj('lineData')[0].Data.Linestatus == '生产完成' || getLocalObj('lineData')[0].Data.Linestatus == '停止' || getLocalObj('lineData')[0].Data.Linestatus == '离线') {
                                        console.log('生产完成')
                                        dev.status = '停止'
                                    }
                                }
                                if (dev.status == '停止') dev.detail[det] = 0
                                if (dev.status == '未启用') dev.detail[det] = 0
                            }
                            else {
                                delete dev.detail[det]
                            }
                        }
                        
                        ifDevData = true
                        continue
                    }
                    //其他设置数据
                    if (!ifDevData) {

                    }
                }
                console.log(that.deviceBtns)
            },
            //通过ajax而不是webSocket获取状态数据
            getStatusData: function () {
                var that = this
                $.ajax({
                    url: "api/dt/GetAllTable?strMessage=GetAllTable",
                    success: function (data) {
                        that.loading = false
                        data = JSON.parse(data)
                        console.log('ajax 获取状态数据')
                        console.log(data)
                        that.handleStatusData(data)
                    }
                })
            }
        },
        created: function () {
            var that = this;
            //ajax 获取状态数据
            this.getStatusData()
            //webSocket 获取数据
            ws.onmessage = function (result) {
                that.loading = false
                console.log('webSocket 获取数据')
                that.handleStatusData(JSON.parse(result.data))
            };
            ws.onerror = function (error) {
              console.log(error);
            };
            ws.onclose = function (error) {
                console.log(error);
            };
            //获取useage参数
            window.setInterval(function () {
                that.getUseage()
            },5000)
            this.getUseage()
            loadHtml("mainPage", "partPage")
        }
    })
</script>



